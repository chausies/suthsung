// Generated by CoffeeScript 2.5.1
(function() {
  window.joinRoom = function() {
    var form, joinRoomFromForm, nav, nicknameInput, secretID, sesh, tempKeyInput, usrnm;
    window.getTime().then(function(t) {
      console.log("Loaded Join Room page at time: " + t);
    });
    nav = document.querySelector("#navBar");
    nav.style.display = 'none';
    [secretID, usrnm, sesh] = localStorage.getItem("account").split(",");
    form = document.querySelector("#joinRoomForm");
    tempKeyInput = document.querySelector("#tempKeyField");
    nicknameInput = document.querySelector("#userNicknameField");
    nicknameInput.value = usrnm;
    joinRoomFromForm = function(e) {
      var nickname, peerjsChannelId, tempKey;
      // prevent normal submission behavior that refreshes page
      e.preventDefault();
      tempKey = tempKeyInput.value.toLowerCase();
      if (tempKeyInput.length !== 6) {
        alert("Temporary Key must be exactly 6 alphanumeric characters");
        return;
      }
      nickname = nicknameInput.value;
      roomName.value = '';
      nickname.value = '';
      peerjsChannelId = 'a' + nacl.util.encodeBase64(window.hasher(tempKey)) + 'a';
      alert("UNDER CONSTRUCTION");
    };
    // window.goToPage({loc: "room", id: "placeholder"})
    form.onsubmit = joinRoomFromForm;
  };

}).call(this);
// Generated by CoffeeScript 2.5.1
(function() {
  window.list = function() {
    var nav;
    window.getTime().then(function(t) {
      console.log("Loaded list page at time: " + t);
      console.log("list.coffee under construction at time " + t);
    });
    nav = document.querySelector("nav");
    nav.style.display = null;
  };

}).call(this);
// Generated by CoffeeScript 2.5.1
(function() {
  var j, len, pageName, pageNames, sha, strToUint, uintToStr, xor,
    indexOf = [].indexOf;

  console.log("Starting");

  window.lastTime = null;

  window.clientTimeOffset = null;

  window.getTime = async function() {
    var clientTime, realTime;
    clientTime = Date.now() / 1000;
    if ((!window.lastTime) || (!window.clientTimeOffset) || Math.abs(clientTime - window.lastTime) > 10 * 60) {
      realTime = (await fetch("https://showcase.api.linx.twenty57.net/UnixTime/tounix?date=now").then(function(r) {
        return r.text();
      }).then((st) => {
        return parseInt(st);
      }));
      clientTime = (clientTime + (Date.now() / 1000)) / 2;
      window.clientTimeOffset = realTime - clientTime;
    }
    return window.lastTime = Math.round(clientTime + window.clientTimeOffset);
  };

  window.getTime().then(function(t) {
    return console.log("Current Real Unix Time is: " + t);
  });

  window.getStamp = async function() {
    var st, uniqueTag;
    // reverse string
    uniqueTag = Math.floor(Math.random() * 100000).toString().slice(0, 5);
    st = ((await window.getTime())).toString();
    return '0'.repeat(20 - st.length) + st + uniqueTag;
  };

  strToUint = function(str) {
    return new TextEncoder('utf-8').encode(str);
  };

  uintToStr = function(uint8array) {
    return new TextDecoder().decode(uint8array);
  };

  xor = function(a1, a2) {
    var i, j, r, ref, s;
    // XORs two Uint8Arrays
    if (a1.length > a2.length) {
      r = a1.slice(0);
      s = a2;
    } else {
      r = a2.slice(0);
      s = a1;
    }
    for (i = j = 0, ref = s.length - 1; (0 <= ref ? j <= ref : j >= ref); i = 0 <= ref ? ++j : --j) {
      r[i] ^= s[i];
    }
    return r;
  };

  sha = function(uint8arr) {
    return nacl.hash(uint8arr).slice(0, 32);
  };

  window.SALT = sha(strToUint("suthsung"));

  window.hasher = function(strs) {
    var uint8arr;
    // Hashes an array of strs, or a single str
    if (Array.isArray(strs)) {
      return hasher(xor(hasher(strs.slice(1)), hasher(salts[0])));
    }
    uint8arr = strToUint(strs);
    return sha(xor(sha(uint8arr), window.SALT));
  };

  window.pswdUsrnmToHash = function(pswd, usrnm) {
    var b, pswdHash, seed, slt;
    // Takes a password and username string and returns a secretKey
    pswdHash = window.hasher(pswd);
    slt = window.hasher(usrnm);
    b = bcrypt.hash(pswdHash, slt, 12);
    seed = xor(pswdHash, Uint8Array.from(b));
    return nacl.util.encodeBase64(seed);
  };

  window.getParam = function(key) {
    var u;
    u = new URL(window.location.href);
    return u.searchParams.get(key);
  };

  pageNames = ["signin", "list", "room", "newRoom", "joinRoom", "settings"];

  window.pages = {};

  for (j = 0, len = pageNames.length; j < len; j++) {
    pageName = pageNames[j];
    window.pages[pageName] = fetch('/html/' + pageName + '.html').then(function(resp) {
      return resp.text();
    });
  }

  window.runPage = async function(pageName, arg) {
    document.getElementById("mainContent").innerHTML = (await window.pages[pageName]);
    switch (pageName) {
      case "signin":
        return (await window.signin());
      case "settings":
        return (await window.settings());
      case "newRoom":
        return (await window.newRoom());
      case "joinRoom":
        return (await window.joinRoom());
      case "room":
        return (await window.room(arg));
      default:
        return (await window.list());
    }
  };

  window.goToPage = async function(dict) {
    var arg, k, loc, u, v;
    if (!dict) {
      loc = window.getParam("loc");
      // Go to correct page specified by url params
      if (!localStorage.getItem("account")) {
        window.goToPage({
          loc: "signin"
        });
        return;
      } else if ((!loc) || (!(indexOf.call(pageNames, loc) >= 0))) {
        window.goToPage({
          loc: "list"
        });
        return;
      }
    } else {
      loc = dict.loc;
      u = new URL(window.location.href);
      for (k in dict) {
        v = dict[k];
        u.searchParams.set(k, v);
      }
      window.location.href = u.href;
    }
    arg = null;
    if (loc === "room") {
      arg = window.getParam("id");
    }
    return (await window.runPage(loc, arg));
  };

  window.onload = function() {};

  // await window.goToPage()

}).call(this);
// Generated by CoffeeScript 2.5.1
(function() {
  window.newRoom = function() {
    var createRoomFromForm, form, nav, nicknameInput, roomNameInput, secretID, sesh, usrnm;
    window.getTime().then(function(t) {
      console.log("Loaded New Room page at time: " + t);
    });
    nav = document.querySelector("#navBar");
    nav.style.display = 'none';
    [secretID, usrnm, sesh] = localStorage.getItem("account").split(",");
    form = document.querySelector("#newRoomForm");
    roomNameInput = document.querySelector("#roomNameField");
    nicknameInput = document.querySelector("#userNicknameField");
    nicknameInput.value = usrnm;
    createRoomFromForm = function(e) {
      var nickname, roomId, roomName;
      // prevent normal submission behavior that refreshes page
      e.preventDefault();
      roomName = roomNameInput.value;
      roomName.value = '';
      nickname = nicknameInput.value;
      nickname.value = '';
      roomId = nacl.util.encodeBase64(crypto.getRandomValues(new Uint8Array(16))); // Random 128bit ID
    };
    // validate room params
    // TODO:  <04-07-20x> #
    // await localforage.getItem("roomList")
    //   .then((roomList) ->
    //     if !roomList
    //       # hasn't been set up yet
    //       roomList = ["
    // window.goToPage({loc: "room", id: "placeholder"})
    form.onsubmit = createRoomFromForm;
  };

}).call(this);
// Generated by CoffeeScript 2.5.1
(function() {
  window.room = function(roomId) {
    window.getTime().then(function(t) {
      console.log("room.coffee under construction at time " + t);
    });
    window.scrollTo(0, document.body.scrollHeight);
  };

}).call(this);
// Generated by CoffeeScript 2.5.1
(function() {
  window.settings = function() {
    window.getTime().then(function(t) {
      console.log("settings.coffee under construction at time " + t);
    });
  };

}).call(this);
// Generated by CoffeeScript 2.5.1
(function() {
  window.signin = function() {
    var form, nav, passwordInput, sessionInput, signinFromForm, usernameInput;
    window.getTime().then(function(t) {
      console.log("Loaded Sign In page at time: " + t);
    });
    nav = document.querySelector("#navBar");
    nav.style.display = 'none';
    form = document.querySelector("#signInForm");
    usernameInput = document.querySelector("#usernameField");
    passwordInput = document.querySelector("#passwordField");
    sessionInput = document.querySelector("#sessionField");
    signinFromForm = function(e) {
      var pswd, secretID, sesh, usrnm;
      // prevent normal submission behavior that refreshes page
      e.preventDefault();
      // Commas are removed from username
      usrnm = usernameInput.value.toLowerCase().replaceAll(",", "");
      usernameInput.value = '';
      pswd = passwordInput.value;
      passwordInput.value = '';
      sesh = sessionInput.value.toLowerCase();
      sessionInput.value = '';
      secretID = window.pswdUsrnmToHash(pswd, usrnm);
      localStorage.setItem("account", [secretID, usrnm, sesh].join(","));
      window.goToPage({
        loc: "list"
      });
    };
    form.onsubmit = signinFromForm;
  };

}).call(this);
// Generated by CoffeeScript 2.5.1
(function() {
  // A bunch of indexedDB methods to be accessed by other files
  // Set up some general databases
  var binSearch;

  binSearch = function(arr, val, comp) {
    var dec, max, min, piv;
    if (!comp) {
      comp = function(v1, v2) {
        if (v1 < v2) {
          return -1;
        } else if (v1 > v2) {
          return 1;
        } else {
          return 0;
        }
      };
    }
    if (arr.length === 0) {
      return 0;
    }
    min = arr.length - 1;
    max = arr.length - 1;
    dec = 1; // decrement
    while (comp(val, arr[min]) <= 0 && min > 0) {
      min = Math.max(min - dec, 0);
      dec = dec * 2;
    }
    if (min === 0 && comp(val, arr[0]) <= 0) {
      return 0;
    }
    while (Math.abs(max - min) > 1) {
      piv = Math.floor((max + min) / 2);
      if (comp(val, arr[piv]) <= 0) {
        max = piv;
      } else {
        min = piv;
      }
    }
    if (comp(val, arr[min]) > 0) {
      return max;
    } else {
      return min;
    }
  };

  // window.addEventToLog = (roomId, stamp, event, checksum, verifier, verification) ->
//   localforage.getItem("roomList")
//   .then((roomList) ->
//     if not (roomId in roomList)
//       throw new Error()
//     return localforage.getItem(roomId + "/logs")
//   )then( (logs) ->
//     verifier = nacl.util.decodeBase64(verifier)
//     verification = nacl.util.decodeBase64(verification)
//     i
//     stamp
//   ).catch( (err) ->
//     return
//   )

}).call(this);
